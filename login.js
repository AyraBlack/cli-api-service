// login.js - Updated to use TOTP and fix waitForTimeout

const puppeteer = require('puppeteer');
const fs = require('fs').promises;
const path = require('path');
const { authenticator } = require('otplib'); // For TOTP code generation

const CHROME_USER_DATA_DIR = process.env.CHROME_USER_DATA_DIR;
const YOUTUBE_URL = 'https://www.youtube.com';
const GOOGLE_LOGIN_URL = 'https://accounts.google.com/signin/v2/identifier';

const YOUTUBE_EMAIL = process.env.YOUTUBE_EMAIL;
const YOUTUBE_PASSWORD = process.env.YOUTUBE_PASSWORD;
const YOUTUBE_TOTP_SECRET = process.env.YOUTUBE_TOTP_SECRET; 

const COOKIE_FILE_PATH = path.join(process.cwd(), 'cookies.txt');

async function saveCookies(page) {
  console.log('Login Robot: Attempting to save cookies...');
  try {
    const ytCookies = await page.cookies(YOUTUBE_URL);
    const googleCookies = await page.cookies('https://accounts.google.com');
    const allCookies = [...ytCookies, ...googleCookies];
    let cookieStr = "# Netscape HTTP Cookie File\n# Generated by Puppeteer\n\n";
    for (const cookie of allCookies) {
      if (!cookie.domain) continue;
      cookieStr += [
        cookie.domain, cookie.domain.startsWith('.') ? 'TRUE' : 'FALSE',
        cookie.path, cookie.secure ? 'TRUE' : 'FALSE',
        cookie.expires && cookie.expires !== -1 ? Math.round(cookie.expires) : '0',
        cookie.name, cookie.value,
      ].join('\t') + '\n';
    }
    await fs.writeFile(COOKIE_FILE_PATH, cookieStr);
    console.log(`Login Robot: Cookies saved successfully to ${COOKIE_FILE_PATH}`);
  } catch (err) {
    console.error('Login Robot: Error saving cookies:', err);
    throw err;
  }
}

async function tryToLogInToYouTube() {
  console.log('Login Robot: Hello! I will try to make sure Chromium is logged into YouTube.');
  if (!CHROME_USER_DATA_DIR) {
    console.error('Login Robot: Missing CHROME_USER_DATA_DIR.'); process.exitCode = 1; return;
  }
  console.log(`Login Robot: Chromium profile at ${CHROME_USER_DATA_DIR}`);

  if (!YOUTUBE_EMAIL || !YOUTUBE_PASSWORD) {
    console.warn('Login Robot: No YOUTUBE_EMAIL/YOUTUBE_PASSWORD set.'); process.exitCode = 1; return;
  }
  if (!YOUTUBE_TOTP_SECRET) {
    console.warn('Login Robot: YOUTUBE_TOTP_SECRET environment variable is not set. Cannot perform 2FA with authenticator app.');
    process.exitCode = 1; return;
  }

  let browser;
  let page;

  try {
    console.log('Login Robot: Launching Chromium headless...');
    browser = await puppeteer.launch({
      executablePath: '/usr/bin/chromium',
      headless: true,
      args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage', `--user-data-dir=${CHROME_USER_DATA_DIR}`]
    });

    page = await browser.newPage();
    await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36');

    console.log('Login Robot: Proceeding to perform a fresh login...');
    await page.goto(GOOGLE_LOGIN_URL, { waitUntil: 'networkidle2', timeout: 30000 });

    console.log('Login Robot: Entering email...');
    await page.waitForSelector('input[type="email"]', { timeout: 15000 });
    await page.type('input[type="email"]', YOUTUBE_EMAIL, { delay: 120 });
    await page.click('#identifierNext');

    console.log('Login Robot: Entering password...');
    await page.waitForSelector('input[type="password"]', { visible: true, timeout: 25000 });
    await page.type('input[type="password"]', YOUTUBE_PASSWORD, { delay: 130 });
    await page.click('#passwordNext');

    console.log('Login Robot: Waiting for navigation or 2FA prompt after password...');

    try {
      await page.waitForFunction(
        () => document.body.innerText.includes('2-Step Verification') || document.body.innerText.includes('Verify itâ€™s you'),
        { timeout: 20000 }
      );
      console.log('Login Robot: 2-Step Verification page detected. Attempting TOTP flow...');
      await page.screenshot({ path: '2fa_page_detected.png' });
      console.log('Login Robot: Screenshot 2fa_page_detected.png saved.');

      console.log('Login Robot: Attempting to click "Try another way"...');
      await page.evaluate(() => {
        const buttons = Array.from(document.querySelectorAll('button, div[role="button"], a, span[role="link"]'));
        const targetButton = buttons.find(btn => (btn.innerText && btn.innerText.toLowerCase().includes('try another way')) || (btn.textContent && btn.textContent.toLowerCase().includes('try another way')));
        if (targetButton) targetButton.click();
        else throw new Error('"Try another way" element not found.');
      });
      console.log('Login Robot: Clicked "Try another way". Waiting for options...');
      // MODIFIED LINE: Replaced page.waitForTimeout
      await new Promise(resolve => setTimeout(resolve, 3000)); // Give page time to show options
      await page.screenshot({ path: '2fa_try_another_way_options.png' });
      console.log('Login Robot: Screenshot 2fa_try_another_way_options.png saved.');
      
      console.log('Login Robot: Attempting to select "Authenticator app" option...');
      await page.evaluate(() => { // Removed unused text parameter from here
        const options = Array.from(document.querySelectorAll('div[role="link"], div[role="button"], li[role="menuitem"], div[data-challengetype]'));
        const targetOption = options.find(opt => opt.innerText && (opt.innerText.toLowerCase().includes("authenticator app") || opt.innerText.toLowerCase().includes("google authenticator")));
        if (targetOption) targetOption.click();
        else throw new Error('"Authenticator app" option not found.');
      });
      console.log('Login Robot: Selected "Authenticator app". Waiting for code input field...');
      // MODIFIED LINE: Replaced page.waitForTimeout
      await new Promise(resolve => setTimeout(resolve, 3000)); // Give page time to show input field
      await page.screenshot({ path: '2fa_totp_input_page.png' });
      console.log('Login Robot: Screenshot 2fa_totp_input_page.png saved.');

      const totpInputSelector = 'input[type="tel"][name="totpPin"], input[type="text"][aria-label*="verification code"], input#idvPin';
      await page.waitForSelector(totpInputSelector, { visible: true, timeout: 15000 });
      
      const totpCode = authenticator.generate(YOUTUBE_TOTP_SECRET);
      console.log(`Login Robot: Generated TOTP code: ${totpCode}. Entering code...`);
      await page.type(totpInputSelector, totpCode, { delay: 150 });

      const checkboxSelector = 'input[type="checkbox"][name="PersistentCookie"], input[type="checkbox"]#PersistentCookie';
      try {
        const checkbox = await page.$(checkboxSelector);
        if (checkbox) {
          const isChecked = await page.evaluate(el => el.checked, checkbox);
          if (!isChecked) {
            console.log('Login Robot: Attempting to check "Don\'t ask again on this device"...');
            await checkbox.click({ delay: 100 });
            console.log('Login Robot: "Don\'t ask again" checkbox click attempted.');
          }
        } else {
          console.log('Login Robot: "Don\'t ask again" checkbox not found with specific selectors.');
        }
      } catch (cbErr) {
        console.error('Login Robot: Error with "Don\'t ask again" checkbox:', cbErr.message);
      }
      
      console.log('Login Robot: Submitting TOTP code...');
      await page.evaluate(() => { // Removed unused selector parameter
          const buttons = Array.from(document.querySelectorAll('button, div[role="button"]')); // Simpler selector for submit
          let targetButton = buttons.find(btn => btn.innerText && (btn.innerText.toLowerCase() === "next" || btn.innerText.toLowerCase() === "verify"));
          if (targetButton) targetButton.click();
          else throw new Error('Submit button for TOTP (Next/Verify) not found.');
      });

      console.log('Login Robot: TOTP submitted. Waiting for login confirmation...');
      await page.waitForFunction(
        `document.querySelector('ytd-topbar-menu-button-renderer yt-icon-button#button') || document.body.innerText.includes('Welcome,') || document.body.innerText.includes('Manage your Google Account') || document.querySelector('a[href*="accounts.google.com/SignOutOptions"]')`,
        { timeout: 45000 }
      );
      console.log('Login Robot: Login successful after 2FA (TOTP).');

    } catch (e) {
      console.error('Login Robot: Error during 2FA (TOTP) flow or 2FA not detected as expected:', e.message);
      // Ensure page object is available before trying to take a screenshot
      if (page && typeof page.screenshot === 'function') {
          await page.screenshot({ path: '2fa_flow_error.png' });
          console.log('Login Robot: Screenshot 2fa_flow_error.png saved.');
      }
    }

    console.log('Login Robot: Navigating to YouTube to finalize session and save cookies...');
    await page.goto(YOUTUBE_URL, { waitUntil: 'networkidle2', timeout: 30000 });

    const avatarSel = 'ytd-topbar-menu-button-renderer yt-icon-button#button';
    const isLikelyLoggedIn = await page.$(avatarSel);
    if (isLikelyLoggedIn) {
      console.log('Login Robot: Login flow complete. Avatar found on YouTube.');
    } else {
      console.warn('Login Robot: Avatar not found on YouTube after login flow. Login may be incomplete.');
      if (page && typeof page.screenshot === 'function') {
          await page.screenshot({ path: 'login_final_youtube_missing_avatar.png' });
          console.log('Login Robot: Screenshot login_final_youtube_missing_avatar.png saved.');
      }
    }
    await saveCookies(page);

  } catch (err) {
    console.error('Login Robot: Critical error during login flow:', err.message);
    if (page && typeof page.screenshot === 'function') {
        try { await page.screenshot({ path: 'login_critical_error_main.png' }); console.log('Login Robot: Screenshot login_critical_error_main.png saved.'); }
        catch (ssError) { console.error('Login Robot: Could not save main error screenshot:', ssError.message); }
    }
    process.exitCode = 1;
  } finally {
    if (browser) {
      console.log('Login Robot: Closing browser...');
      await browser.close();
    }
    console.log('Login Robot: Done.');
  }
}

if (require.main === module) {
  console.log('Login Robot: Running standalone test modeâ€¦');
  tryToLogInToYouTube()
    .then(() => {
      console.log(`Login Robot: Exiting with code ${process.exitCode || 0}.`);
      process.exit(process.exitCode || 0);
    })
    .catch((err) => {
        console.error("Login Robot: Unhandled promise rejection in standalone mode:", err);
        process.exit(1);
    });
}

module.exports = { tryToLogInToYouTube };
