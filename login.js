// login.js - Simplified version for no-2FA, MODIFIED TO ALWAYS EXIT 0 FOR DEBUGGING

const puppeteer = require('puppeteer');
const fs = require('fs').promises;
const path = require('path');

const CHROME_USER_DATA_DIR = process.env.CHROME_USER_DATA_DIR;
const YOUTUBE_URL = 'https://www.youtube.com';
const GOOGLE_LOGIN_URL = 'https://accounts.google.com/signin/v2/identifier';

const YOUTUBE_EMAIL = process.env.YOUTUBE_EMAIL;
const YOUTUBE_PASSWORD = process.env.YOUTUBE_PASSWORD;

const COOKIE_FILE_PATH = path.join(process.cwd(), 'cookies.txt');

async function saveCookies(page) {
  console.log('Login Robot: Attempting to save cookies...');
  try {
    const ytCookies = await page.cookies(YOUTUBE_URL);
    const googleCookies = await page.cookies('https://accounts.google.com');
    const allCookies = [...ytCookies, ...googleCookies]; 
    let cookieStr = "# Netscape HTTP Cookie File\n# Generated by Puppeteer\n\n";
    for (const cookie of allCookies) {
      if (!cookie.domain) continue;
      cookieStr += [
        cookie.domain, cookie.domain.startsWith('.') ? 'TRUE' : 'FALSE', 
        cookie.path, cookie.secure ? 'TRUE' : 'FALSE',
        cookie.expires && cookie.expires !== -1 ? Math.round(cookie.expires) : '0', 
        cookie.name, cookie.value,
      ].join('\t') + '\n';
    }
    await fs.writeFile(COOKIE_FILE_PATH, cookieStr);
    console.log(`Login Robot: Cookies saved successfully to ${COOKIE_FILE_PATH}`);
  } catch (err) {
    console.error('Login Robot: Error saving cookies:', err);
    // Don't throw error here in debug mode if saving fails, just log it.
  }
}

async function tryToLogInToYouTube() {
  let loginErrorOccurred = false; // Flag to track if we hit an error
  console.log('Login Robot: Hello! Simplified login flow starting (No 2FA expected). [DEBUG MODE: Will exit 0 even on error]');

  if (!CHROME_USER_DATA_DIR) {
    console.error('Login Robot: Missing CHROME_USER_DATA_DIR.'); loginErrorOccurred = true; return loginErrorOccurred;
  }
  console.log(`Login Robot: Chromium profile at ${CHROME_USER_DATA_DIR}`);

  if (!YOUTUBE_EMAIL || !YOUTUBE_PASSWORD) {
    console.warn('Login Robot: No YOUTUBE_EMAIL/YOUTUBE_PASSWORD set.'); loginErrorOccurred = true; return loginErrorOccurred;
  }

  let browser;
  let page; 

  try {
    console.log('Login Robot: Launching Chromium headless...');
    browser = await puppeteer.launch({
      executablePath: '/usr/bin/chromium', 
      headless: true,
      args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage', `--user-data-dir=${CHROME_USER_DATA_DIR}`]
    });

    page = await browser.newPage();
    await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36');

    console.log('Login Robot: Proceeding to perform a fresh login...');    
    await page.goto(GOOGLE_LOGIN_URL, { waitUntil: 'networkidle2', timeout: 30000 });

    console.log('Login Robot: Entering email...');
    await page.waitForSelector('input[type="email"]', { timeout: 15000 });
    await page.type('input[type="email"]', YOUTUBE_EMAIL, { delay: 120 });
    await page.click('#identifierNext');

    console.log('Login Robot: Entering password...');
    await page.waitForSelector('input[type="password"]', { visible: true, timeout: 25000 }); // This is where it failed before
    await page.type('input[type="password"]', YOUTUBE_PASSWORD, { delay: 130 });
    await page.click('#passwordNext');

    console.log('Login Robot: Waiting for navigation after password (expecting success)...');
    try {
         await page.waitForFunction(
           `document.querySelector('ytd-topbar-menu-button-renderer yt-icon-button#button') || document.body.innerText.includes('Welcome, <span class="math-inline">\{YOUTUBE\_EMAIL\}'\) \|\| document\.body\.innerText\.includes\('Manage your Google Account'\) \|\| document\.querySelector\('a\[href\*\="accounts\.google\.com/SignOutOptions"\]'\)\`,
\{ timeout\: 45000 \} 
\);
console\.log\('Login Robot\: Post\-login check passed \(found expected elements\)\.'\);
\} catch \(navError\) \{
console\.warn\('Login Robot\: Did not find clear indicators of login success quickly\. Waiting for general navigation\.\.\.'\);
try \{
await page\.waitForNavigation\(\{ waitUntil\: 'networkidle2', timeout\: 30000 \}\);
\} catch \(finalNavError\) \{
console\.error\('Login Robot\: Navigation after password failed or timed out\.', finalNavError\.message\);
\}
if \(page && typeof page\.screenshot \=\=\= 'function'\) \{
await page\.screenshot\(\{ path\: 'login\_no2fa\_nav\_error\.png' \}\);
console\.log\('Login Robot\: Screenshot login\_no2fa\_nav\_error\.png saved\.'\);
\}
\}
console\.log\('Login Robot\: Navigating to YouTube to finalize session and save cookies\.\.\.'\);
await page\.goto\(YOUTUBE\_URL, \{ waitUntil\: 'networkidle2', timeout\: 30000 \}\);
const avatarSel \= 'ytd\-topbar\-menu\-button\-renderer yt\-icon\-button\#button';
const isLikelyLoggedIn \= await page\.</span>(avatarSel);
    if (isLikelyLoggedIn) {
      console.log('Login Robot: Login flow complete. Avatar found on YouTube.');
    } else {
      console.warn('Login Robot: Avatar not found on YouTube after login flow. Login may be incomplete.');
       if (page && typeof page.screenshot === 'function') {
          await page.screenshot({ path: 'login_no2fa_final_youtube_missing_avatar.png' });
          console.log('Login Robot: Screenshot login_no2fa_final_youtube_missing_avatar.png saved.');
       }
    }
    // Try to save cookies even if login seemed incomplete
    await saveCookies(page);

  } catch (err) {
    // *** MODIFICATION: Note the error, but don't set exit code to 1 ***
    loginErrorOccurred = true; 
    console.error('Login Robot: Critical error during simplified login flow:', err.message);
    if (page && typeof page.screenshot === 'function') {
        try { 
            // Ensure the correct screenshot name for THIS error is saved
            await page.screenshot({ path: 'login_no2fa_critical_error.png' }); 
            console.log('Login Robot: Screenshot login_no2fa_critical_error.png saved due to error.'); 
        }
        catch (ssError) { console.error('Login Robot: Could not save error screenshot:', ssError.message); }
    }
    // process.exitCode = 1; // <-- REMOVED THIS to allow server.js to start
  } finally {
    if (browser) {
      console.log('Login Robot: Closing browser...');
      await browser.close();
    }
    console.log('Login Robot: Done.');
    // Return the error flag instead of exiting directly
    return loginErrorOccurred; 
  }
}

if (require.main === module) {
  console.log('Login Robot: Running standalone test modeâ€¦');
  tryToLogInToYouTube()
    .then((errorOccurred) => { // Check the flag returned by the function
      // *** MODIFICATION: Always exit 0 in standalone test mode for now ***
      const exitCode = 0; // Force
