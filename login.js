// login.js - Our Little Login Robot for YouTube

const puppeteer = require('puppeteer');
const fs = require('fs').promises; // Using promises for async file operations
const path = require('path');

// Path to Chromium's profile, set via Docker ENV
const CHROME_USER_DATA_DIR = process.env.CHROME_USER_DATA_DIR;
const YOUTUBE_URL = 'https://www.youtube.com'; // Corrected to youtube.com
const GOOGLE_LOGIN_URL = 'https://accounts.google.com/signin/v2/identifier';

const YOUTUBE_EMAIL = process.env.YOUTUBE_EMAIL;
const YOUTUBE_PASSWORD = process.env.YOUTUBE_PASSWORD;

const COOKIE_FILE_PATH = path.join(process.cwd(), 'cookies.txt'); // Save cookies.txt in the current working directory

async function saveCookies(page) {
  console.log('Login Robot: Attempting to save cookies...');
  try {
    // Get cookies for YouTube and Google domains
    const ytCookies = await page.cookies(YOUTUBE_URL);
    const googleCookies = await page.cookies('https://accounts.google.com');
    const allCookies = [...ytCookies, ...googleCookies];

    let cookieStr = "# Netscape HTTP Cookie File\n";
    cookieStr += "# This file was generated by Puppeteer. Do not edit.\n\n";

    for (const cookie of allCookies) {
      if (!cookie.domain) {
        console.warn(`Login Robot: Skipping cookie without domain: ${cookie.name}`);
        continue;
      }
      cookieStr += [
        cookie.domain,
        cookie.domain.startsWith('.') ? 'TRUE' : 'FALSE',
        cookie.path,
        cookie.secure ? 'TRUE' : 'FALSE',
        cookie.expires && cookie.expires !== -1 ? Math.round(cookie.expires) : '0',
        cookie.name,
        cookie.value,
      ].join('\t') + '\n';
    }

    await fs.writeFile(COOKIE_FILE_PATH, cookieStr);
    console.log(`Login Robot: Cookies saved successfully to ${COOKIE_FILE_PATH}`);
  } catch (err) {
    console.error('Login Robot: Error saving cookies:', err);
    throw err;
  }
}

async function tryToLogInToYouTube() {
  console.log('Login Robot: Hello! I will try to make sure Chromium is logged into YouTube.');

  if (!CHROME_USER_DATA_DIR) {
    console.error('Login Robot: Missing CHROME_USER_DATA_DIR. Check Docker ENV.');
    process.exitCode = 1;
    return;
  }
  console.log(`Login Robot: Chromium profile at ${CHROME_USER_DATA_DIR}`);

  if (!YOUTUBE_EMAIL || !YOUTUBE_PASSWORD) {
    console.warn('Login Robot: No YOUTUBE_EMAIL/YOUTUBE_PASSWORD set. Full login flow cannot be performed.');
    // If there's an existing session in the profile, we could try to save those cookies,
    // but for yt-dlp, fresh cookies from an active login are much more reliable.
    // We will proceed to try and log in, but it will fail if no credentials.
    // Alternatively, exit if you don't want to proceed without credentials.
    process.exitCode = 1; // Set error if no credentials, as full login is now the goal.
    return; // Exit if no credentials, as we are now aiming for a full login.
  }

  let browser;
  try {
    console.log('Login Robot: Launching Chromium headless...');
    browser = await puppeteer.launch({
      executablePath: '/usr/bin/chromium', // Ensure this path is correct for your Coolify env
      headless: true,
      args: [
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--disable-dev-shm-usage',
        `--user-data-dir=${CHROME_USER_DATA_DIR}`
      ]
    });

    const page = await browser.newPage();
    await page.setUserAgent(
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) ' +
      'AppleWebKit/537.36 (KHTML, like Gecko) ' +
      'Chrome/115.0.0.0 Safari/537.36' // User agent should match yt-dlp
    );

    // **MODIFICATION: Always attempt a fresh login**
    console.log('Login Robot: Proceeding to perform a fresh login to ensure fresh cookies...');

    // Optional: Clear cookies before attempting a new login to ensure a truly fresh state
    // This can sometimes help if Google is suspicious of the existing session.
    // console.log('Login Robot: Clearing existing Google/YouTube cookies before login attempt...');
    // const client = await page.target().createCDPSession();
    // await client.send('Network.clearBrowserCookies');
    // You might want to be more specific and delete cookies for '.google.com' and '.youtube.com'

    await page.goto(GOOGLE_LOGIN_URL, { waitUntil: 'networkidle2', timeout: 30000 });

    console.log('Login Robot: Entering email...');
    await page.waitForSelector('input[type="email"]', { timeout: 15000 });
    await page.type('input[type="email"]', YOUTUBE_EMAIL, { delay: 120 });
    await page.click('#identifierNext'); // Ensure this selector is still valid for Google's login page

    console.log('Login Robot: Entering password...');
    // It's crucial to wait for the password field to be visible and ready after email submission
    // Google's login flow can have intermediate steps or delays.
    await page.waitForSelector('input[type="password"]', { visible: true, timeout: 25000 });
    await page.type('input[type="password"]', YOUTUBE_PASSWORD, { delay: 130 });
    await page.click('#passwordNext'); // Ensure this selector is still valid

    console.log('Login Robot: Waiting for navigation after password...');
    // After submitting password, wait for signs of successful login.
    // This could be navigating to YouTube, or seeing a specific element on a Google page.
    // Increased timeout as post-login redirects can be slow.
    try {
      // Wait for either the YouTube avatar or a common Google account page element.
      // This helps confirm login was broadly successful before saving cookies.
      await page.waitForFunction(
        `document.querySelector('ytd-topbar-menu-button-renderer yt-icon-button#button') || document.body.innerText.includes('Welcome,') || document.body.innerText.includes('Manage your Google Account') || document.querySelector('a[href*="accounts.google.com/SignOutOptions"]')`,
        { timeout: 60000 } // Increased timeout
      );
      console.log('Login Robot: Post-login check passed (found avatar, welcome message, or sign out options).');
    } catch (navError) {
      console.warn('Login Robot: Did not find clear indicators of login success immediately. Navigating to YouTube to double check and save cookies anyway.');
      // Fallback: attempt to navigate to YouTube and check again, then save cookies.
      // This path might mean 2FA or a consent screen was missed.
      await page.screenshot({ path: 'login_post_nav_error.png' }); // Save screenshot for debugging
      console.log('Login Robot: Screenshot login_post_nav_error.png saved.');
    }

    // Navigate to YouTube to ensure cookies are set for the correct domain if not already there.
    console.log('Login Robot: Navigating to YouTube to finalize session and save cookies...');
    await page.goto(YOUTUBE_URL, { waitUntil: 'networkidle2', timeout: 30000 });

    const avatarSel = 'ytd-topbar-menu-button-renderer yt-icon-button#button';
    const isLikelyLoggedIn = await page.$(avatarSel);
    if (isLikelyLoggedIn) {
      console.log('Login Robot: Login SUCCESS! Avatar found after full login flow.');
    } else {
      console.warn('Login Robot: Login may have FAILED or is incomplete. Avatar not found after full login flow. Cookies will be saved anyway.');
      await page.screenshot({ path: 'login_failure_final_check.png' }); // Save screenshot for debugging
      console.log('Login Robot: Screenshot login_failure_final_check.png saved.');
      // Consider not saving cookies or throwing an error if login is critical and avatar isn't found
    }
    await saveCookies(page); // Save cookies regardless of final avatar check after attempting full login.

  } catch (err) {
    console.error('Login Robot: Error during login flow:', err.message);
    // Try to take a screenshot if an error occurs during the login process
    if (page) {
        try {
            await page.screenshot({ path: 'login_error_screenshot.png' });
            console.log('Login Robot: Screenshot login_error_screenshot.png saved due to error.');
        } catch (ssError) {
            console.error('Login Robot: Could not save error screenshot:', ssError.message);
        }
    }
    process.exitCode = 1;
  } finally {
    if (browser) {
      console.log('Login Robot: Closing browser...');
      await browser.close();
    }
    console.log('Login Robot: Done.');
  }
}

if (require.main === module) {
  console.log('Login Robot: Running standalone test modeâ€¦');
  tryToLogInToYouTube()
    .then(() => {
      console.log(`Login Robot: Exiting with code ${process.exitCode || 0}.`);
      process.exit(process.exitCode || 0);
    })
    .catch((err) => {
        console.error("Login Robot: Unhandled promise rejection in standalone mode:", err)
        process.exit(1)
    });
}

module.exports = { tryToLogInToYouTube };
