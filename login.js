// login.js - Updated to pause for 2-Step Verification

const puppeteer = require('puppeteer');
const fs = require('fs').promises;
const path = require('path');

const CHROME_USER_DATA_DIR = process.env.CHROME_USER_DATA_DIR;
const YOUTUBE_URL = 'https://www.youtube.com';
const GOOGLE_LOGIN_URL = 'https://accounts.google.com/signin/v2/identifier';

const YOUTUBE_EMAIL = process.env.YOUTUBE_EMAIL;
const YOUTUBE_PASSWORD = process.env.YOUTUBE_PASSWORD;

const COOKIE_FILE_PATH = path.join(process.cwd(), 'cookies.txt');

async function saveCookies(page) {
  console.log('Login Robot: Attempting to save cookies...');
  try {
    const ytCookies = await page.cookies(YOUTUBE_URL);
    const googleCookies = await page.cookies('https://accounts.google.com');
    const allCookies = [...ytCookies, ...googleCookies];
    let cookieStr = "# Netscape HTTP Cookie File\n# Generated by Puppeteer\n\n";
    for (const cookie of allCookies) {
      if (!cookie.domain) continue;
      cookieStr += [
        cookie.domain, cookie.domain.startsWith('.') ? 'TRUE' : 'FALSE',
        cookie.path, cookie.secure ? 'TRUE' : 'FALSE',
        cookie.expires && cookie.expires !== -1 ? Math.round(cookie.expires) : '0',
        cookie.name, cookie.value,
      ].join('\t') + '\n';
    }
    await fs.writeFile(COOKIE_FILE_PATH, cookieStr);
    console.log(`Login Robot: Cookies saved successfully to ${COOKIE_FILE_PATH}`);
  } catch (err) {
    console.error('Login Robot: Error saving cookies:', err);
    throw err;
  }
}

async function tryToLogInToYouTube() {
  console.log('Login Robot: Hello! I will try to make sure Chromium is logged into YouTube.');
  if (!CHROME_USER_DATA_DIR) {
    console.error('Login Robot: Missing CHROME_USER_DATA_DIR.');
    process.exitCode = 1; return;
  }
  console.log(`Login Robot: Chromium profile at ${CHROME_USER_DATA_DIR}`);
  if (!YOUTUBE_EMAIL || !YOUTUBE_PASSWORD) {
    console.warn('Login Robot: No YOUTUBE_EMAIL/YOUTUBE_PASSWORD set. Full login cannot be performed.');
    process.exitCode = 1; return;
  }

  let browser;
  let page; // Define page here to access it in catch/finally for screenshots

  try {
    console.log('Login Robot: Launching Chromium headless...');
    browser = await puppeteer.launch({
      executablePath: '/usr/bin/chromium',
      headless: true,
      args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage', `--user-data-dir=${CHROME_USER_DATA_DIR}`]
    });

    page = await browser.newPage();
    await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36');

    console.log('Login Robot: Proceeding to perform a fresh login...');
    await page.goto(GOOGLE_LOGIN_URL, { waitUntil: 'networkidle2', timeout: 30000 });

    console.log('Login Robot: Entering email...');
    await page.waitForSelector('input[type="email"]', { timeout: 15000 });
    await page.type('input[type="email"]', YOUTUBE_EMAIL, { delay: 120 });
    await page.click('#identifierNext');

    console.log('Login Robot: Entering password...');
    await page.waitForSelector('input[type="password"]', { visible: true, timeout: 25000 });
    await page.type('input[type="password"]', YOUTUBE_PASSWORD, { delay: 130 });
    await page.click('#passwordNext');

    console.log('Login Robot: Waiting for navigation or 2FA prompt after password...');

    // Check for 2-Step Verification page (based on your screenshot)
    try {
      await page.waitForFunction(
        () => document.body.innerText.includes('2-Step Verification') && 
              document.body.innerText.includes('Open the Gmail app on iPhone'),
        { timeout: 15000 } // Wait up to 15 seconds for the 2FA page to appear
      );
      
      console.log('!!! Login Robot: 2-STEP VERIFICATION PROMPT DETECTED !!!');
      console.log('!!! Please approve the sign-in on your iPhone NOW. You have 2 minutes. !!!');
      console.log('!!! The script will also try to check "Don\'t ask again on this device". !!!');
      
      // Try to find and click the "Don't ask again on this device" checkbox
      // This selector is a guess; it might need adjustment if it doesn't work.
      // Common selectors are input[type="checkbox"] with a specific name or aria-label.
      // For Google, it's often an input with id="PersistentCookie" or name="PersistentCookie"
      // Or a div that acts as a checkbox.
      const checkboxSelector = 'input[type="checkbox"]'; // Generic, might need to be more specific
      // More specific (guess, might need to find the actual ID or a better selector):
      // const checkboxSelector = '#PersistentCookie'; 
      // const checkboxSelector = 'input[name="PersistentCookie"]';
      // const checkboxSelector = 'div[role="checkbox"]'; // Another common pattern for custom checkboxes

      try {
        const checkbox = await page.$(checkboxSelector);
        if (checkbox) {
          const isChecked = await page.evaluate(el => el.checked, checkbox);
          if (!isChecked) {
            console.log('Login Robot: Attempting to check the "Don\'t ask again on this device" checkbox...');
            // Clicking the label associated with a checkbox is often more reliable if direct .click() fails
            // For now, a direct click:
            await checkbox.click({ delay: 100 }); // A small delay can sometimes help
            // Or, if there's a label:
            // const label = await page.evaluateHandle(el => el.closest('label') || el.parentElement.closest('label'), checkbox);
            // if (label) await label.click(); else await checkbox.click();
            console.log('Login Robot: "Don\'t ask again" checkbox click attempted.');
          } else {
            console.log('Login Robot: "Don\'t ask again" checkbox already seemed to be checked.');
          }
        } else {
          console.log('Login Robot: "Don\'t ask again" checkbox not found with current selector.');
        }
      } catch (cbErr) {
        console.error('Login Robot: Error trying to click the checkbox:', cbErr.message);
      }

      await page.waitForTimeout(120000); // Wait 2 minutes (120,000 milliseconds) for you to approve
      console.log('Login Robot: 2-minute wait for 2FA approval is over. Proceeding...');

    } catch (e) {
      // This means the 2FA page with "Open the Gmail app on iPhone" wasn't detected within 15s
      // It might have gone straight to login, or to a different 2FA method, or another page.
      console.log('Login Robot: Standard 2FA phone prompt page not detected quickly, or login proceeded. Checking general success indicators...');
      try {
         await page.waitForFunction(
           `document.querySelector('ytd-topbar-menu-button-renderer yt-icon-button#button') || document.body.innerText.includes('Welcome,') || document.body.innerText.includes('Manage your Google Account') || document.querySelector('a[href*="accounts.google.com/SignOutOptions"]')`,
           { timeout: 45000 } // Original timeout if 2FA page wasn't the one we explicitly checked for
         );
         console.log('Login Robot: Post-login check passed (found avatar, welcome, or sign out options).');
      } catch (navError) {
         console.warn('Login Robot: Did not find clear indicators of login success after password submission.');
         await page.screenshot({ path: 'login_post_password_error.png' });
         console.log('Login Robot: Screenshot login_post_password_error.png saved.');
      }
    }

    console.log('Login Robot: Navigating to YouTube to finalize session and save cookies...');
    await page.goto(YOUTUBE_URL, { waitUntil: 'networkidle2', timeout: 30000 });

    const avatarSel = 'ytd-topbar-menu-button-renderer yt-icon-button#button';
    const isLikelyLoggedIn = await page.$(avatarSel);
    if (isLikelyLoggedIn) {
      console.log('Login Robot: Login flow complete. Avatar found on YouTube.');
    } else {
      console.warn('Login Robot: Avatar not found on YouTube after login flow. Login may be incomplete.');
      await page.screenshot({ path: 'login_final_youtube_missing_avatar.png' });
      console.log('Login Robot: Screenshot login_final_youtube_missing_avatar.png saved.');
    }
    await saveCookies(page);

  } catch (err) {
    console.error('Login Robot: Error during login flow:', err.message);
    if (page) {
        try { await page.screenshot({ path: 'login_critical_error.png' }); console.log('Login Robot: Screenshot login_critical_error.png saved.'); }
        catch (ssError) { console.error('Login Robot: Could not save error screenshot:', ssError.message); }
    }
    process.exitCode = 1;
  } finally
