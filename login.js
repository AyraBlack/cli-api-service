// login.js - Attempting to use puppeteer-extra with stealth plugin

// Use puppeteer-extra and load stealth plugin
const puppeteer = require('puppeteer-extra');
const StealthPlugin = require('puppeteer-extra-plugin-stealth');
puppeteer.use(StealthPlugin()); 

const fs = require('fs').promises;
const path = require('path');

const CHROME_USER_DATA_DIR = process.env.CHROME_USER_DATA_DIR;
const YOUTUBE_URL = 'https://www.youtube.com';
const GOOGLE_LOGIN_URL = 'https://accounts.google.com/signin/v2/identifier';

const YOUTUBE_EMAIL = process.env.YOUTUBE_EMAIL; // Should be the no-2FA email
const YOUTUBE_PASSWORD = process.env.YOUTUBE_PASSWORD; // Should be the no-2FA password

const COOKIE_FILE_PATH = path.join(process.cwd(), 'cookies.txt');

async function saveCookies(page) {
  console.log('Login Robot: Attempting to save cookies...');
  try {
    const ytCookies = await page.cookies(YOUTUBE_URL);
    const googleCookies = await page.cookies('https://accounts.google.com');
    const allCookies = [...ytCookies, ...googleCookies]; 
    let cookieStr = "# Netscape HTTP Cookie File\n# Generated by Puppeteer\n\n";
    for (const cookie of allCookies) {
      if (!cookie.domain) continue;
      cookieStr += [
        cookie.domain, cookie.domain.startsWith('.') ? 'TRUE' : 'FALSE', 
        cookie.path, cookie.secure ? 'TRUE' : 'FALSE',
        cookie.expires && cookie.expires !== -1 ? Math.round(cookie.expires) : '0', 
        cookie.name, cookie.value,
      ].join('\t') + '\n';
    }
    await fs.writeFile(COOKIE_FILE_PATH, cookieStr);
    console.log(`Login Robot: Cookies saved successfully to ${COOKIE_FILE_PATH}`);
  } catch (err) {
    console.error('Login Robot: Error saving cookies:', err);
    throw err; // Propagate error if saving fails
  }
}

async function tryToLogInToYouTube() {
  console.log('Login Robot: Simplified login flow starting (using Stealth Plugin).');
  process.exitCode = 1; // Default to error exit code

  if (!CHROME_USER_DATA_DIR) {
    console.error('Login Robot: Missing CHROME_USER_DATA_DIR.'); return; 
  }
  console.log(`Login Robot: Chromium profile at ${CHROME_USER_DATA_DIR}`);

  if (!YOUTUBE_EMAIL || !YOUTUBE_PASSWORD) {
    console.warn('Login Robot: No YOUTUBE_EMAIL/YOUTUBE_PASSWORD set.'); return; 
  }

  let browser;
  let page; 

  try {
    console.log('Login Robot: Launching Chromium headless with Stealth...');
    browser = await puppeteer.launch({ 
      executablePath: '/usr/bin/chromium', 
      headless: true, 
      args: [
        '--no-sandbox', 
        '--disable-setuid-sandbox', 
        '--disable-dev-shm-usage', 
        `--user-data-dir=${CHROME_USER_DATA_DIR}`,
        '--disable-blink-features=AutomationControlled' // A common stealth argument
      ]
    });

    page = await browser.newPage();
    await page.setViewport({ width: 1366, height: 768 }); // Use a standard viewport
    // User agent is typically handled by stealth plugin, but you could force one if needed

    console.log('Login Robot: Proceeding to perform a fresh login...');            
    await page.goto(GOOGLE_LOGIN_URL, { waitUntil: 'networkidle2', timeout: 45000 }); // Increased timeout slightly

    console.log('Login Robot: Entering email...');
    await page.waitForSelector('input[type="email"]', { timeout: 20000 }); // Increased timeout
    await page.type('input[type="email"]', YOUTUBE_EMAIL, { delay: 120 });
    await page.click('#identifierNext');
    console.log('Login Robot: Clicked Next after email.');
    
    await new Promise(resolve => setTimeout(resolve, 3000)); // Brief pause
    await page.screenshot({ path: 'login_stealth_after_email.png' });
    console.log('Login Robot: Screenshot login_stealth_after_email.png saved.');


    console.log('Login Robot: Waiting for password field...');
    // Use a more robust selector wait if possible, or increase timeout
    await page.waitForSelector('input[type="password"]', { visible: true, timeout: 30000 }); // Increased timeout
    console.log('Login Robot: Password field found. Entering password...');
    await page.type('input[type="password"]', YOUTUBE_PASSWORD, { delay: 130 });
    await page.click('#passwordNext');
    console.log('Login Robot: Clicked Next after password.');

    console.log('Login Robot: Waiting for successful login confirmation...');
    // Wait for navigation to complete OR a known success element appears.
    // This combination is generally more robust than waiting for just one.
    await Promise.race([
        page.waitForNavigation({ waitUntil: 'networkidle2', timeout: 45000 }),
        page.waitForFunction(
           // Look for YouTube avatar OR Google account elements
           `document.querySelector('ytd-topbar-menu-button-renderer yt-icon-button#button') || document.body.innerText.includes('Manage your Google Account') || document.querySelector('a[href*="accounts.google.com/SignOutOptions"]')`,
           { timeout: 45000 } 
         )
    ]);
    console.log('Login Robot: Login appears successful (navigation or success element found).');
   
    console.log('Login Robot: Navigating to YouTube to finalize session and save cookies...');
    await page.goto(YOUTUBE_URL, { waitUntil: 'networkidle2', timeout: 30000 });

    const avatarSel = 'ytd-topbar-menu-button-renderer yt-icon-button#button';
    const isLikelyLoggedIn = await page.$(avatarSel);
    if (isLikelyLoggedIn) {
      console.log('Login Robot: Login flow complete. Avatar found on YouTube.');
      await saveCookies(page);
      process.exitCode = 0; // <<< Set exit code to 0 ONLY on full success
    } else {
      console.error('Login Robot: Login FAILED. Avatar not found on YouTube after login flow.');
      if (page && typeof page.screenshot === 'function') {
          await page.screenshot({ path: 'login_stealth_final_youtube_missing_avatar.png' });
          console.log('Login Robot: Screenshot login_stealth_final_youtube_missing_avatar.png saved.');
      }
    }

  } catch (err) {
    console.error('Login Robot: Critical error during stealth login flow:', err.message);
    process.exitCode = 1; // Ensure exit code is 1 on error
    if (page && typeof page.screenshot === 'function') {
        try { 
            await page.screenshot({ path: 'login_stealth_critical_error.png' }); 
            console.log('Login Robot: Screenshot login_stealth_critical_error.png saved due to error.'); 
        }
        catch (ssError) { console.error('Login Robot: Could not save error screenshot:', ssError.message); }
    }
  } finally {
    if (browser) {
      console.log('Login Robot: Closing browser...');
      await browser.close();
    }
    console.log('Login Robot: Done.');
    // Removed direct process.exit - Manager script handles restart based on exit code
  }
}

// If your manager script runs this file with node, this block executes it.
// If your manager script requires the module and calls tryToLogInToYouTube, 
// it will rely on the process.exitCode being set.
if (require.main === module) {
  console.log('Login Robot: Running standalone test modeâ€¦');
  tryToLogInToYouTube().finally(() => {
    console.log(`Login Robot: Standalone execution finished. Exiting with code ${process.exitCode}.`);
    process.exit(process.exitCode);
  });
}

module.exports = { tryToLogInToYouTube };
