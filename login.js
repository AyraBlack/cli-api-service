// login.js - Our Little Login Robot for YouTube

const puppeteer = require('puppeteer');
const fs = require('fs').promises; // Using promises for async file operations
const path = require('path');

// Path to Chromium's profile, set via Docker ENV
const CHROME_USER_DATA_DIR = process.env.CHROME_USER_DATA_DIR;
const YOUTUBE_URL = 'https://www.youtube.com';
const GOOGLE_LOGIN_URL = 'https://accounts.google.com/signin/v2/identifier';

const YOUTUBE_EMAIL = process.env.YOUTUBE_EMAIL;
const YOUTUBE_PASSWORD = process.env.YOUTUBE_PASSWORD;

const COOKIE_FILE_PATH = path.join(process.cwd(), 'cookies.txt'); // Save cookies.txt in the current working directory

async function saveCookies(page) {
  console.log('Login Robot: Attempting to save cookies...');
  try {
    const cookies = await page.cookies(YOUTUBE_URL, 'https://accounts.google.com'); // Get cookies for YouTube and Google
    let cookieStr = "# Netscape HTTP Cookie File\n";
    cookieStr += "# This file was generated by Puppeteer. Do not edit.\n\n";

    for (const cookie of cookies) {
      // Ensure essential fields are present, especially domain
      if (!cookie.domain) {
        console.warn(`Login Robot: Skipping cookie without domain: ${cookie.name}`);
        continue;
      }
      cookieStr += [
        cookie.domain,
        cookie.domain.startsWith('.') ? 'TRUE' : 'FALSE', // hostOnly flag approximation
        cookie.path,
        cookie.secure ? 'TRUE' : 'FALSE',
        cookie.expires && cookie.expires !== -1 ? Math.round(cookie.expires) : '0', // 0 for session cookies if no expiry
        cookie.name,
        cookie.value,
      ].join('\t') + '\n';
    }

    await fs.writeFile(COOKIE_FILE_PATH, cookieStr);
    console.log(`Login Robot: Cookies saved successfully to ${COOKIE_FILE_PATH}`);
  } catch (err) {
    console.error('Login Robot: Error saving cookies:', err);
    throw err; // Re-throw to be caught by the main try-catch
  }
}

async function tryToLogInToYouTube() {
  console.log('Login Robot: Hello! I will try to make sure Chromium is logged into YouTube.');

  if (!CHROME_USER_DATA_DIR) {
    console.error('Login Robot: Missing CHROME_USER_DATA_DIR. Check Docker ENV.');
    process.exitCode = 1; // Indicate an error
    return;
  }
  console.log(`Login Robot: Chromium profile at ${CHROME_USER_DATA_DIR}`);

  if (!YOUTUBE_EMAIL || !YOUTUBE_PASSWORD) {
    console.warn('Login Robot: No YOUTUBE_EMAIL/YOUTUBE_PASSWORD set. Skipping full login flow.');
    // Even if not logging in, if a session exists in the profile, try to save those cookies.
    // However, this might not be what you want if you expect a fresh login.
    // For now, we'll only save cookies after an explicit login attempt or successful verification.
    process.exitCode = 1;
    return;
  }

  let browser;
  try {
    console.log('Login Robot: Launching Chromium headless...');
    browser = await puppeteer.launch({
      executablePath: '/usr/bin/chromium',
      headless: true,
      args: [
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--disable-dev-shm-usage',
        `--user-data-dir=${CHROME_USER_DATA_DIR}`
      ]
    });

    const page = await browser.newPage();
    await page.setUserAgent(
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) ' +
      'AppleWebKit/537.36 (KHTML, like Gecko) ' +
      'Chrome/115.0.0.0 Safari/537.36'
    );

    console.log('Login Robot: Navigating to YouTube to check login status...');
    await page.goto(YOUTUBE_URL, { waitUntil: 'networkidle2', timeout: 30000 });

    const avatarSel = 'ytd-topbar-menu-button-renderer yt-icon-button#button'; // YouTube's avatar/profile button
    let isLikelyLoggedIn = await page.$(avatarSel);

    if (isLikelyLoggedIn) {
      console.log('Login Robot: Avatar found. Potentially already logged in. Verifying session...');
      // Add a more robust check here if needed, e.g., navigate to a members-only page or YouTube Studio.
      // For now, we'll assume if avatar is there, session might be good enough to save cookies.
      await saveCookies(page);
    } else {
      console.log('Login Robot: Not logged in or session invalid. Performing fresh login steps...');
      // Optional: Clear cookies before attempting a new login to ensure a truly fresh state
      // const client = await page.target().createCDPSession();
      // await client.send('Network.clearBrowserCookies');
      // console.log('Login Robot: Cleared browser cookies for a fresh login.');

      await page.goto(GOOGLE_LOGIN_URL, { waitUntil: 'networkidle2', timeout: 30000 });

      console.log('Login Robot: Entering email...');
      await page.waitForSelector('input[type="email"]', { timeout: 15000 });
      await page.type('input[type="email"]', YOUTUBE_EMAIL, { delay: 120 }); // Slightly increased delay
      await page.click('#identifierNext');

      console.log('Login Robot: Entering password...');
      await page.waitForSelector('input[type="password"]', { visible: true, timeout: 20000 });
      await page.type('input[type="password"]', YOUTUBE_PASSWORD, { delay: 130 }); // Slightly increased delay
      await page.click('#passwordNext');

      console.log('Login Robot: Waiting for navigation after password...');
      // Wait for navigation to YouTube or a Google page indicating success, or for the avatar to appear
      try {
        await page.waitForFunction(
          `document.querySelector('${avatarSel}') || document.body.innerText.includes('Welcome,') || document.body.innerText.includes('Manage your Google Account')`,
          { timeout: 45000 }
        );
      } catch (navError) {
        console.warn('Login Robot: Did not find avatar or welcome message immediately after login. Navigating to YouTube to double check.');
        // Fallback: attempt to navigate to YouTube and check again
      }


      console.log('Login Robot: Navigating to YouTube to confirm login...');
      await page.goto(YOUTUBE_URL, { waitUntil: 'networkidle2', timeout: 30000 });

      isLikelyLoggedIn = await page.$(avatarSel);
      if (isLikelyLoggedIn) {
        console.log('Login Robot: Login SUCCESS! Avatar found after navigation.');
        await saveCookies(page);
      } else {
        console.error('Login Robot: Login may have FAILED. Avatar not found after login attempt and YouTube navigation.');
        // You could try to save a screenshot here for debugging:
        // await page.screenshot({ path: 'login_failure.png' });
        // console.log('Login Robot: Screenshot saved to login_failure.png');
        throw new Error('Login failed: Avatar not found after login process.');
      }
    }
  } catch (err) {
    console.error('Login Robot: Error during login flow:', err.message);
    process.exitCode = 1; // Indicate an error
  } finally {
    if (browser) {
      console.log('Login Robot: Closing browser...');
      await browser.close();
    }
    console.log('Login Robot: Done.');
  }
}

if (require.main === module) {
  console.log('Login Robot: Running standalone test modeâ€¦');
  tryToLogInToYouTube()
    .then(() => {
      if (process.exitCode === 1) {
        console.log("Login Robot: Exiting with error code 1.");
      } else {
        console.log("Login Robot: Exiting successfully.");
      }
      process.exit(process.exitCode || 0);
    })
    .catch((err) => {
        console.error("Login Robot: Unhandled promise rejection in standalone mode:", err)
        process.exit(1)
    });
}

module.exports = { tryToLogInToYouTube };
